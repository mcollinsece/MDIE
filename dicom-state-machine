{
  "Comment": "DICOM Processing and Bedrock Inference Workflow",
  "StartAt": "Get Configuration",
  "States": {
    "Get Configuration": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Get Network Params",
          "States": {
            "Get Network Params": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ssm:getParameters",
              "Parameters": {
                "Names": [
                  "/dicom/network/subnet-ids",
                  "/dicom/network/security-group-id"
                ],
                "WithDecryption": true
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "Get Task Params",
          "States": {
            "Get Task Params": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ssm:getParameters",
              "Parameters": {
                "Names": [
                  "/dicom/tasks/dicom-converter-container",
                  "/dicom/tasks/dicom-converter-task",
                  "/dicom/tasks/bedrock-inference-container",
                  "/dicom/tasks/bedrock-inference-task",
                  "/dicom/tasks/dicom-converter-cluster"
                ],
                "WithDecryption": true
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "Get Storage and Function Params",
          "States": {
            "Get Storage and Function Params": {
              "Type": "Task",
              "Resource": "arn:aws:states:::aws-sdk:ssm:getParameters",
              "Parameters": {
                "Names": [
                  "/dicom/storage/output-bucket",
                  "/dicom/storage/inference-output-bucket",
                  "/dicom/functions/layer-count-function",
                  "/dicom/functions/aggregate-results-function"
                ],
                "WithDecryption": true
              },
              "End": true
            }
          }
        }
      ],
      "ResultPath": "$.config",
      "ResultSelector": {
        "Parameters.$": "$[*].Parameters[*]"
      },
      "Next": "Merge Parameters"
    },
    "Merge Parameters": {
      "Type": "Pass",
      "Parameters": {
        "Parameters.$": "States.ArrayUnique($.config.Parameters)"
      },
      "ResultPath": "$.config",
      "Next": "Convert DICOM to Image Layers"
    },
    "Convert DICOM to Image Layers": {
      "Type": "Task",
      "Resource": "arn:aws:states:::ecs:runTask.sync",
      "Parameters": {
        "LaunchType": "FARGATE",
        "Cluster.$": "States.ArrayGetItem($.config.Parameters[?(@.Name == '/dicom/tasks/dicom-converter-cluster')].Value, 0)",
        "TaskDefinition.$": "States.ArrayGetItem($.config.Parameters[?(@.Name == '/dicom/tasks/dicom-converter-task')].Value, 0)",
        "NetworkConfiguration": {
          "AwsvpcConfiguration": {
            "Subnets.$": "States.StringSplit(States.ArrayGetItem($.config.Parameters[?(@.Name == '/dicom/network/subnet-ids')].Value, 0), ',')",
            "SecurityGroups.$": "States.StringSplit(States.ArrayGetItem($.config.Parameters[?(@.Name == '/dicom/network/security-group-id')].Value, 0), ',')",
            "AssignPublicIp": "DISABLED"
          }
        },
        "Overrides": {
          "ContainerOverrides": [
            {
              "Name.$": "States.ArrayGetItem($.config.Parameters[?(@.Name == '/dicom/tasks/dicom-converter-container')].Value, 0)",
              "Environment": [
                {
                  "Name": "INPUT_BUCKET_NAME",
                  "Value.$": "$.bucket"
                },
                {
                  "Name": "INPUT_KEY",
                  "Value.$": "$.key"
                },
                {
                  "Name": "OUTPUT_BUCKET_NAME",
                  "Value.$": "States.ArrayGetItem($.config.Parameters[?(@.Name == '/dicom/storage/output-bucket')].Value, 0)"
                }
              ]
            }
          ]
        }
      },
      "ResultPath": "$.conversionResult",
      "Next": "Get Layer Count"
    },
    "Get Layer Count": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName.$": "States.ArrayGetItem($.config.Parameters[?(@.Name == '/dicom/functions/layer-count-function')].Value, 0)",
        "Payload": {
          "outputBucket.$": "States.ArrayGetItem($.config.Parameters[?(@.Name == '/dicom/storage/output-bucket')].Value, 0)",
          "outputPrefix.$": "$.conversionResult.OutputPrefix"
        }
      },
      "ResultPath": "$.layerCount",
      "Next": "Process Layers"
    },
    "Process Layers": {
      "Type": "Map",
      "InputPath": "$",
      "ItemsPath": "$.layerCount.Payload.layers",
      "MaxConcurrency": 5,
      "Iterator": {
        "StartAt": "Run Bedrock Inference",
        "States": {
          "Run Bedrock Inference": {
            "Type": "Task",
            "Resource": "arn:aws:states:::ecs:runTask.sync",
            "Parameters": {
              "LaunchType": "FARGATE",
              "TaskDefinition.$": "States.ArrayGetItem($.config.Parameters[?(@.Name == '/dicom/tasks/bedrock-inference-task')].Value, 0)",
              "NetworkConfiguration": {
                "AwsvpcConfiguration": {
                  "Subnets.$": "States.StringSplit(States.ArrayGetItem($.config.Parameters[?(@.Name == '/dicom/network/subnet-ids')].Value, 0), ',')",
                  "SecurityGroups.$": "States.StringSplit(States.ArrayGetItem($.config.Parameters[?(@.Name == '/dicom/network/security-group-id')].Value, 0), ',')",
                  "AssignPublicIp": "DISABLED"
                }
              },
              "Overrides": {
                "ContainerOverrides": [
                  {
                    "Name.$": "States.ArrayGetItem($.config.Parameters[?(@.Name == '/dicom/tasks/bedrock-inference-container')].Value, 0)",
                    "Environment": [
                      {
                        "Name": "INPUT_BUCKET",
                        "Value.$": "States.ArrayGetItem($.config.Parameters[?(@.Name == '/dicom/storage/output-bucket')].Value, 0)"
                      },
                      {
                        "Name": "INPUT_KEY",
                        "Value.$": "$$.Map.Item.Value"
                      },
                      {
                        "Name": "OUTPUT_BUCKET",
                        "Value.$": "States.ArrayGetItem($.config.Parameters[?(@.Name == '/dicom/storage/inference-output-bucket')].Value, 0)"
                      }
                    ]
                  }
                ]
              }
            },
            "End": true
          }
        }
      },
      "Next": "Aggregate Results"
    },
    "Aggregate Results": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName.$": "States.ArrayGetItem($.config.Parameters[?(@.Name == '/dicom/functions/aggregate-results-function')].Value, 0)",
        "Payload": {
          "inferenceBucket.$": "States.ArrayGetItem($.config.Parameters[?(@.Name == '/dicom/storage/inference-output-bucket')].Value, 0)",
          "inferencePrefix.$": "$.conversionResult.OutputPrefix"
        }
      },
      "End": true
    }
  }
}
